// File name: Decode.hdl

/**
 * The instruction decoder determines the type of instruction (A-instruction or C-instruction)
 * and decodes those instructions.
 * The input `in[16]` is the instruction to be decoded.
 * The outputs are used as follows:
 *   type:      0 if A-instruction, 1 if C-instruction. 
 *   a:         Determines whether the ALU input uses A (0) or Memory[A] (1) (bit 12 in C-instruction)
 *   c1 .. c6:  Control bits for the ALU operation (bits 11-6 in C-instruction)
 *   d1, d2, d3:  Destination bits (bits 5-3 in C-instruction)
 *   j1, j2, j3:  Jump bits (bits 2-0 in C-instruction)
 * For A-instructions, d1 should be 1, all other outputs should be 0.
 * For C-instructions, outputs should correspond to their bits in the C-instruction.
 */

CHIP Decode {

    IN  in[16];             // instruction to decode

    OUT type,               // Instruction type (0 for A-instruction, 1 for C-instruction)
        a,                  // ALU A/M select (from bit 12 in C-instruction)
        c1, c2, c3, c4, c5, c6,  // Control bits for ALU (from bits 11-6 in C-instruction)
        d1, d2, d3,         // Destination bits (from bits 5-3 in C-instruction)
        j1, j2, j3;         // Jump bits (from bits 2-0 in C-instruction)

PARTS:
    Or(a=in[15], b=false, out=type);
    Mux(a=false, b=in[12], sel=type, out=a);
    Mux(a=false, b=in[11], sel=type, out=c1);
    Mux(a=false, b=in[10], sel=type, out=c2);
    Mux(a=false, b=in[9], sel=type, out=c3);
    Mux(a=false, b=in[8], sel=type, out=c4);
    Mux(a=false, b=in[7], sel=type, out=c5);
    Mux(a=false, b=in[6], sel=type, out=c6);
    Mux(a=false, b=in[5], sel=type, out=d1);
    Mux(a=false, b=in[4], sel=type, out=d2);
    Mux(a=false, b=in[3], sel=type, out=d3);
    Mux(a=false, b=in[2], sel=type, out=j1);
    Mux(a=false, b=in[1], sel=type, out=j2);
    Mux(a=false, b=in[0], sel=type, out=j3);

}


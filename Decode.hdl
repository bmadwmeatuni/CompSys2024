CHIP Decode {

    IN  in[16];             // instruction to decode

    OUT type,               // Instruction type (0 for A-instruction, 1 for C-instruction)
        a,                  // ALU A/M select (from bit 12 in C-instruction)
        c1, c2, c3, c4, c5, c6,  // Control bits for ALU (from bits 11-6 in C-instruction)
        d1, d2, d3,         // Destination bits (from bits 5-3 in C-instruction)
        j1, j2, j3;         // Jump bits (from bits 2-0 in C-instruction)

    PARTS:
    // Determine if the instruction is A-type (type = 0) or C-type (type = 1)
    // type is directly connected to the most significant bit (in[15])
    And(a=in[15], b=true, out=type);

    // For C-instructions, pass the respective instruction bits to outputs when type is 1
    And(a=in[12], b=type, out=a);     // ALU A/M select

    And(a=in[11], b=type, out=c1);    // ALU control bits (bits 11-6)
    And(a=in[10], b=type, out=c2);
    And(a=in[9], b=type, out=c3);
    And(a=in[8], b=type, out=c4);
    And(a=in[7], b=type, out=c5);
    And(a=in[6], b=type, out=c6);

    // Destination bits (bits 5-3 in C-instruction)
    And(a=in[5], b=type, out=d1);
    And(a=in[4], b=type, out=d2);
    And(a=in[3], b=type, out=d3);

    // Jump bits (bits 2-0 in C-instruction)
    And(a=in[2], b=type, out=j1);
    And(a=in[1], b=type, out=j2);
    And(a=in[0], b=type, out=j3);

    // For A-instructions (type = 0), set d1 = 1 and all other control signals to 0
    Not(in=type, out=notType);
    And(a=notType, b=true, out=d1);  // A-instruction sets d1 = 1

    // All other outputs should be 0 for A-instructions
    And(a=false, b=notType, out=d2);
    And(a=false, b=notType, out=d3);
    And(a=false, b=notType, out=a);
    And(a=false, b=notType, out=c1);
    And(a=false, b=notType, out=c2);
    And(a=false, b=notType, out=c3);
    And(a=false, b=notType, out=c4);
    And(a=false, b=notType, out=c5);
    And(a=false, b=notType, out=c6);
    And(a=false, b=notType, out=j1);
    And(a=false, b=notType, out=j2);
    And(a=false, b=notType, out=j3);
}
